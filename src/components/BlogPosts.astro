---
import { getCollection } from 'astro:content';
import BlogPost from './src/BlogPost.svelte';
const blogCollection = await getCollection('blog');
---

<section class="blog-posts">
    <h2>Blog posts <a href="/rss.xml" class="rss-btn" aria-label="rss button">
      <svg width="249.124" height="249.124" viewBox="0 0 65.914 65.914" xmlns="http://www.w3.org/2000/svg">
        <g transform="translate(2.137 8.643)">
          <rect width="65.914" height="65.914" x="-2.137" y="-8.643" rx="12.5" fill="#fff" id="background" />
          <g id="icon-shapes" fill="#e7a148">
            <circle cx="13.378" cy="41.756" r="4.9" />
            <path
              d="M15.602 19.658a4.9 4.9 0 00-6.28 2.93 4.9 4.9 0 002.928 6.279 23.445 23.445 0 0114.018 14.017 4.9 4.9 0 006.279 2.928 4.9 4.9 0 002.93-6.28 33.265 33.265 0 00-19.875-19.874z" />
            <path
              d="M14.228 2.046a4.9 4.9 0 00-5.675 3.975 4.9 4.9 0 003.974 5.676 38.074 38.074 0 0130.91 30.91 4.9 4.9 0 005.676 3.975 4.9 4.9 0 003.975-5.676C49.594 21.089 34.045 5.54 14.228 2.046z" />
          </g>
        </g>
      </svg>
    </a></h2>
    <div class="tag-container">
      <script is:inline>
        // this function gets used in the next block
        const handleTags = (tag) => {
          // add `.selected` to blog post tags (buttons)
          document.querySelector(`.blog-post-tag.${tag}`).classList.toggle("selected");
          let selectedTags = []; // create an array of the selected tags (buttons)

          // populate the array of `selectedTags`
          // for each selected `blog-post-tag` (button)
          document.querySelectorAll(".blog-post-tag.selected").forEach(e => {
            // push to the `selectedTags` array the names of the selected blog post tags (using their classList and the `selected` class)
            selectedTags.push(Array.from(e.classList).filter(e => e != "blog-post-tag" && e != "selected")[0]);
          });

          // for each blog post
          document.querySelectorAll(".blog-post").forEach(post => {
            let isHidden = false;
            // check if all the selected tags apply
            selectedTags.map(selectedTag => {
              if (!post.classList.contains(selectedTag)) {
                isHidden = true; // if not mark it for hiding
              }
            });

            // hide/unhide posts
            if (isHidden) {
              post.classList.add("hidden");
            } else {
              post.classList.remove("hidden");
            }
          });
        }
      </script>
      {
        blogCollection
          .map((blogPost: { data: { tags: any; }; }) => {
            return blogPost.data.tags;
          })
          .flat()
          .filter((value: any, index: any, self: string | any[]) => self.indexOf(value) === index)
          .map((tag: unknown) => 
            <button
              onclick=`handleTags('${tag}')`
              class={`blog-post-tag ${tag}`}
            >{tag}</button>
          )
      }
    </div>
    {
      blogCollection.sort((a,b) => b.data.pubDate.getTime() - a.data.pubDate.getTime()).map((blogPost: any) => {
        if (!blogPost.data.draft) {
          // all posts which are not drafts
          return <BlogPost client:visible blogPost={blogPost} />
        }
      })
    }
  </section>


  <style lang="scss">
    @use "../styles/variables.scss" as *;
    @use "../styles/components/button.scss" as *;

    .rss-btn {
      color: inherit;
      text-decoration: none;
      display: inline-block;
      vertical-align: middle;

      svg {
        width: 2rem;
        height: 2rem;

        #background {
          fill: #c07e04;
        }

        #icon-shapes {
          fill: $light;
        }
      }
    }

    .blog-post-tag, .blog-posts .tag {
      border-radius: 0.375rem;
      /* stylelint-disable no-descending-specificity */
        &.linux + .close-button, &.linux {
          background-color: $linux-tag;
        }

        &.security + .close-button, &.security {
          background-color: $security-tag;
        }

        &.origami + .close-button, &.origami {
          background-color: $origami-tag;
        }

        &.android + .close-button, &.android {
          background-color: $android-tag;
        }

        &.coding + .close-button, &.coding {
          background-color: $coding-tag;
        }
      }

      .tag-container {
        display: flex;
        flex-wrap: wrap;
        align-items: center;
        justify-content: center;
        margin: 1.5em 2.4rem;

        .blog-post-tag:not(.selected) + .close-button {
          display: none;
        }
      }

      .blog-post-tag {
        margin: 0.25em;
        border: none;
        background-color: transparent;
        cursor: pointer;
        padding: 0.5em 0.2em;
        white-space: pre;
        color: $light;
        font-family: $code-font;
        font-size: 1.5rem;
        font-weight: 500;

        &::before {
          padding-right: 0.25em;
          content: " ";
        }

        &::after {
          padding-left: 0.25em;
          content: " ";
        }

        &.selected {
          font-weight: 800;

          &::before {
            content: ">";
          }

          &::after {
            content: "<";
          }
        }
      }

      .blog-posts {
        h2 {
          margin-top: 2em;
          margin-bottom: 0.625em;
          text-align: center;
        }

        .tags {
          display: flex;
          justify-content: right;
          margin-top: 0.5em;
          font-weight: 500;

          * + * {
            margin-left: 0.5em;
          }

          .tag {
            padding: 0 0.375em;
            text-shadow: none;
            color: $light;
            font-size: 1.4rem;
          }
        }

        .hidden {
          display: none;
        }

        .not-hidden {
          display: inherit;
        }
      }
    
    .new {
        color: $light;
    }
  </style>