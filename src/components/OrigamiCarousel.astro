---
import "../styles/components/origami-carousel.scss";

const { origami } = Astro.props;
const imagesPath = await Astro.glob("/public/origami/instuctions/*/*.svg");
// Astro.glob dynacmic value workaround (filtering from a bigger list):
// https://docs.astro.build/en/guides/troubleshooting/#supported-values

let images: any[] = [];
for (let i = 0; i < imagesPath.length; i++) {
  let src = imagesPath[i];
  if (src.default.includes(origami)) {
    images.push(src.default);
  }
}

// How Astro.glob likes to sort: 1 10 11 12 13 ... 2 21 23 ...
// How I like to sort: 1 2 3 ... 11 12 13 ...
let ascendingSort = (
  x: { match: (arg0: RegExp) => string },
  y: { match: (arg0: RegExp) => string },
) => parseInt(x.match(/\d+/g)) - parseInt(y.match(/\d+/g));
images.sort(ascendingSort);
---

<div class="carousel">
  <button class="carousel-button" id="prev"
    ><div class="arrow prev"></div>
  </button>
  <div class="carousel-images">
    {
      images.map((_, index) => (
        <img
          class="carousel-image"
          alt=""
          src={images[index].replace("/public", "")}
          decoding="async"
        />
      ))
    }
  </div>
  <button class="carousel-button" id="next"
    ><div class="arrow next"></div>
  </button>
  <div class="dots">
    {images.map((_, index) => <button class="dot">{index + 1}</button>)}
  </div>
</div>
<script is:inline>
  // select all images
  const images = document.querySelectorAll(".carousel-image");
  const dot = document.querySelectorAll(".dot");
  // index of current image
  let currentImage = 0;
  // index of last image
  let lastImage = images.length - 1;
  // move each image by 100% so that they overflow horizontally,
  // displaying only one image at a time
  images.forEach((image, index) => {
    image.style.transform = `translateX(${index * 100}%)`; // width of parent
  });
  // selecting the class causes a delay for some reason
  const prev = document.querySelector("#prev");
  const next = document.querySelector("#next");
  // Make the first dot current
  dot[0].dataset.isCurrent = true;
  function updateSlides() {
    // Boundaries
    if (currentImage < 0) {
      currentImage = lastImage;
    } else if (currentImage > lastImage) {
      currentImage = 0;
    }
    // move images on the x.axis for carousel
    images.forEach((image, index) => {
      image.style.transform = `translateX(${(index - currentImage) * 100}%)`;
    });
    // currently displayed image indicator/dot
    dot.forEach((dot) => {
      if (currentImage == parseInt(dot.innerHTML) - 1) {
        dot.dataset.isCurrent = true;
      } else {
        dot.dataset.isCurrent = false;
      }
    });
  }
  // move to next image using the currentImage index
  next.addEventListener("click", () => {
    currentImage++;
    updateSlides();
  });
  // move to previous image using the currentImage index
  prev.addEventListener("click", () => {
    currentImage--;
    updateSlides();
  });
  // move to image of clicked dot
  dot.forEach((dot) => {
    dot.addEventListener("click", () => {
      currentImage = parseInt(dot.innerHTML) - 1;
      updateSlides();
    });
  });
</script>
